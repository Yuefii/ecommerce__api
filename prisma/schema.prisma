// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  userId   String     @id @default(auto()) @map("_id") @db.ObjectId
  nama     String?
  email    String     @unique
  password String
  alamat   String?
  no_telp  String?
  review   Reviews[]
  cart     Carts[]
  order    Orders[]
  products Products[]
}

model Products {
  productId   String      @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String      @db.ObjectId
  nama        String
  description String
  price       Int
  brand       String
  category    String
  quantity    Int
  images      Images[]
  review      Reviews[]
  Cart        Carts[]
  OrderItem   OrderItem[]
  owner       Users       @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
}

model Images {
  imgId     String   @id @default(auto()) @map("_id") @db.ObjectId
  color     String
  colorCode String
  url       String
  productId String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Reviews {
  reviewId  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  users     Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Carts {
  cartId    String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  productId String    @db.ObjectId
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      Users     @relation(fields: [userId], references: [userId])
  product   Products  @relation(fields: [productId], references: [productId])
}

model Orders {
  orderId   String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  user      Users       @relation(fields: [userId], references: [userId])
  items     OrderItem[]
}

model OrderItem {
  orderItemId String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String    @db.ObjectId
  productId   String    @db.ObjectId
  quantity    Int
  price       Int
  subtotal    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  order       Orders    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  product     Products  @relation(fields: [productId], references: [productId])
}
